openapi: 3.1.0
info:
  version: 2.0.3
  title: Social App API
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT.html
  contact:
    name: Oleg Voitiuk
    url: https://www.linkedin.com/in/olegv999
paths:
  /users:
    get:
      summary: Get all users
      tags: [ Users ]
      produces:
        - application/json
      parameters:
        - in: query
          name: PaginationParams
          required: false
          schema:
            $ref: '#/components/params/Pagination'
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    delete:
      security:
        - bearerAuth: [ ]
      summary: Delete current user
      tags: [ Users ]
      responses:
        204:
          description: Users deleted
    patch:
      security:
        - bearerAuth: [ ]
      summary: Update current user profile
      tags: [ Users ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bio:
                  type: string
                  example: I am a developer
                  required: false
                  nullable: true
                website:
                  type: string
                  example: https://example.com
                  required: false
                  nullable: true
                  format: uri
                location:
                  type: string
                  example: New York
                  required: false
                  nullable: true
                birthDay:
                  type: string
                  format: date
                  example: 1990-01-01
                  required: false
                  nullable: true
      responses:
        200:
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/register:
    post:
      summary: Register a new user
      tags: [ Users ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: example@gmail.com
                  required: true
                userName:
                  type: string
                  example: JohnDoe
                  required: true
                password:
                  type: string
                  example: Qwerty1234.
                  required: true
      responses:
        204:
          description: User created
  /users/login:
    post:
      summary: Login a user
      tags: [ Users ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: example@gmail.com
                  required: true
                password:
                  type: string
                  example: Qwerty1234.
                  required: true
      responses:
        200:
          description: User logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/logout:
    get:
      security:
        - bearerAuth: [ ]
      summary: Logout a user
      tags: [ Users ]
      responses:
        204:
          description: User logged out
  /users/{userId}:
    get:
      summary: Get a user by id
      tags: [ Users ]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: 614f3e2e0b7b208f8c5f8b3e
      responses:
        200:
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/image:
    post:
      security:
        - bearerAuth: [ ]
      summary: Upload a user image
      tags: [ Users ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        204:
          description: Image uploaded
  /users/confirm-email/{token}:
    get:
      summary: Confirm user email
      tags: [ Users ]
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      responses:
        200:
          description: Email confirmed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email confirmed

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: 614f3e2e0b7b208f8c5f8b3e
          required: true
        createdAt:
          type: string
          format: date-time
          example: 2021-09-25T18:00:14.000Z
          required: true
        updatedAt:
          type: string
          format: date-time
          example: 2021-09-25T18:00:14.000Z
          required: true
        email:
          type: string
          example: exaple@gail.com
          required: true
          format: email
          minLength: 6
        userName:
          type: string
          example: JohnDoe
          required: true
        birthDay:
          type: string
          format: date
          example: 1990-01-01
          nullable: true
          required: false
        imageURL:
          type: string
          example: https://example.com/avatar.png
          required: true
          nullable: false
          format: uri
        bio:
          type: string
          example: I am a developer
          required: false
          nullable: true
        website:
          type: string
          example: https://example.com
          required: false
          nullable: true
          format: uri
        location:
          type: string
          example: New York
          required: false
          nullable: true
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
          required: false
          nullable: true
        isVerified:
          type: boolean
          example: false
          required: true
          nullable: false
          default: false
        emailVerificationToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
          required: false
          nullable: true
        emailVerificationTokenIssuedAt:
          type: string
          format: date-time
          example: 2021-09-25T18:00:14.000Z
          required: false
          nullable: true
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
          required: false
          nullable: true
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
          required: false
          nullable: true
        likes:
          type: array
          items:
            $ref: '#/components/schemas/Like'
          required: false
          nullable: true
    Post:
      type: object
      properties:
        _id:
          type: string
          example: 614f3e2e0b7b208f8c5f8b3e
          required: true
        createdAt:
          type: string
          format: date-time
          example: 2021-09-25T18:00:14.000Z
          required: true
        updatedAt:
          type: string
          format: date-time
          example: 2021-09-25T18:00:14.000Z
          required: true
        userId:
          type: string
          example: 614f3e2e0b7b208f8c5f8b3e
          required: true
        body:
          type: string
          example: This is a post
          required: true
    Comment:
      type: object
      properties:
        _id:
          type: string
          example: 614f3e2e0b7b208f8c5f8b3e
          required: true
        createdAt:
          type: string
          format: date-time
          example: 2021-09-25T18:00:14.000Z
          required: true
        updatedAt:
          type: string
          format: date-time
          example: 2021-09-25T18:00:14.000Z
          required: true
        userId:
          type: string
          example: 614f3e2e0b7b208f8c5f8b3e
          required: true
        postId:
          type: string
          example: 614f3e2e0b7b208f8c5f8b3e
          required: true
        body:
          type: string
          example: This is a post
          required: true
    Like:
      type: object
      properties:
        _id:
          type: string
          example: 614f3e2e0b7b208f8c5f8b3e
          required: true
        createdAt:
          type: string
          format: date-time
          example: 2021-09-25T18:00:14.000Z
          required: true
        updatedAt:
          type: string
          format: date-time
          example: 2021-09-25T18:00:14.000Z
          required: true
        userId:
          type: string
          example: 614f3e2e0b7b208f8c5f8b3e
          required: true
        postId:
          type: string
          example: 614f3e2e0b7b208f8c5f8b3e
          required: true
        commentId:
          type: string
          example: 614f3e2e0b7b208f8c5f8b3e
          required: true
        likeType:
          type: string
          required: true
          enum:
            - post
            - comment
  params:
    Pagination:
      type: object
      properties:
        skip:
          type: integer
          example: 0
          required: false
          default: 0
          minimum: 0
          nullable: true
        limit:
          type: integer
          example: 100
          required: false
          default: 100
          minimum: 1
          nullable: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
